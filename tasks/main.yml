- name: "Ensure `python_versions` is passed as argument"
  assert:
    that: 
      - python_versions != ""
    msg: "'python_versions' must be passed as argument!!"

- name: "Remove homebrew `python` installations on MAC OSX"
  homebrew:
    name: "{{ item }}"
    state: absent
  with_items:
    - python
    - "python@2"
    - "python@3"
  when: ansible_os_family == "Darwin"

- name: "Install `pyenv`"
  block:
    - name: "Install `pyenv` - Install requirements - UBUNTU"
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      become: yes
      with_items:
        - build-essential
        - libssl-dev
        - zlib1g-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - wget
        - curl
        - llvm
        - libncurses5-dev
        - libncursesw5-dev
        - xz-utils
        - tk-dev
        - libffi-dev
        - liblzma-dev
      when: ansible_os_family == "Debian"

    - name: "Install `pyenv` - Install requirements - MAC OSX"
      homebrew:
        name: "{{ item }}"
        state: latest
        update_homebrew: yes
      become: no
      with_items:
        - readline
        - xz
      when: ansible_os_family == "Darwin"

    - name: "Install `pyenv` - Set `pyenv_root` as fact"
      set_fact:
        pyenv_root: "{{ ansible_env.HOME }}/.pyenv"

    - name: "Install `pyenv` - Checkout `pyenv` to `{{ pyenv_root }}`"
      git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: "{{ pyenv_root }}"


- name: "Install all `python` versions"
  environment:
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
    PYENV_ROOT: "{{ pyenv_root }}"
  block:
    - name: "Install all `python` versions - Install `python`"
      shell: "eval \"$(pyenv init -)\" && pyenv install --skip-existing {{ item }}"
      with_items: "{{ python_versions }}"

    - name: "Install all `python` versions - Set `global` versions with `pyenv`"
      shell: "eval \"$(pyenv init -)\" && pyenv global {{ python_versions|join(' ') }}"


- name: "Install `pipenv` for all `python` versions"
  environment:
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
    PYENV_ROOT: "{{ pyenv_root }}"
  block:
    - name: "Install `pipenv` for all `python` versions - Install `pipenv`"
      pip:
        name: pipenv
        executable: "{{ pyenv_root }}/versions/{{ item }}/bin/pip"
        state: latest
      with_items: "{{ python_versions }}"
