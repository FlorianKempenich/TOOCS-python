---
- name: "Install `python-build` requirements"
  block:
    - name: "Install `python-build` requirements - UBUNTU"
      apt:
        name:
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libffi-dev
          - liblzma-dev
        state: latest
        update_cache: yes
      become: yes
      when: ansible_os_family == "Debian"

    - name: "Install `python-build` requirements - MAC OSX - 1/2"
      homebrew:
        name:
          - openssl
          - readline
          - sqlite3
          - xz
          - zlib
          - pkg-config # Thx: https://github.com/pyenv/pyenv/issues/1184#issuecomment-433683530
        state: latest
        update_homebrew: yes
      become: no
      when: ansible_os_family == "Darwin"

    - name: "Install `python-build` requirements - MAC OSX - 2/2"
      # Install the additional SDK headers when Mojave or higher (10.14+)
      # See: https://github.com/pyenv/pyenv/wiki#suggested-build-environment
      command: installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
      become: yes
      when: ansible_os_family == "Darwin" and ansible_distribution_version >= "10.14"

- name: "Install `pyenv`"
  block:
    - name: "Install `pyenv` - Set `pyenv_root` as fact"
      set_fact:
        pyenv_root: "{{ ansible_env.HOME }}/.pyenv"

    - name: "Install `pyenv` - Checkout `pyenv` to `{{ pyenv_root }}`"
      git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: "{{ pyenv_root }}"
        force: yes


- name: "Install all `python` versions"
  environment:
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
    PYENV_ROOT: "{{ pyenv_root }}"
  block:
    - name: "Install all `python` versions - Install `python`"
      shell: ". /etc/profile && eval \"$(pyenv init -)\" && pyenv install --skip-existing {{ item }}"
      with_items: "{{ python_versions }}"

    - name: "Install all `python` versions - Set `global` versions with `pyenv`"
      shell: ". /etc/profile && eval \"$(pyenv init -)\" && pyenv global {{ python_versions|join(' ') }}"


- name: "Install `pipenv` for all `python` versions"
  environment:
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
    PYENV_ROOT: "{{ pyenv_root }}"
  block:
    - name: "Install `pipenv` for all `python` versions - Install `pipenv`"
      pip:
        name: pipenv
        executable: "{{ pyenv_root }}/versions/{{ item }}/bin/pip"
        state: latest
      with_items: "{{ python_versions }}"


- name: "Install `global_pip_packages`"
  environment:
    PATH: "{{ pyenv_root }}/bin:{{ ansible_env.PATH }}"
    PYENV_ROOT: "{{ pyenv_root }}"
  pip:
    name: "{{ item }}"
    executable: "{{ pyenv_root }}/versions/{{ python_versions[0] }}/bin/pip"
    state: latest
  with_items: "{{ global_pip_packages }}"
